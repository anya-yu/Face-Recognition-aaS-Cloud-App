# Define global args
ARG FUNCTION_DIR="/home/aayu2/project2.1/"
ARG RUNTIME_VERSION="3.8"
ARG DISTRO_VERSION="3.12"

# Base Python image
FROM python:${RUNTIME_VERSION}-alpine AS python-alpine

# Install necessary tools
RUN apk --no-cache add \
    bash \
    ffmpeg \
    build-base \
    cmake \
    libtool \
    automake \
    autoconf \
    curl \
    python3-dev \
    libxml2-dev \
    libxslt-dev

# Set environment variables
ENV FUNCTION_DIR=${FUNCTION_DIR}
ENV RUNTIME_VERSION=${RUNTIME_VERSION}
ENV DISTRO_VERSION=${DISTRO_VERSION}

# Stage 1 - Build image
FROM python-alpine AS build-image

# Create the function directory
RUN mkdir -p ${FUNCTION_DIR}

# Install the Lambda Runtime Interface Client for Python
RUN python${RUNTIME_VERSION} -m pip install awslambdaric --target ${FUNCTION_DIR}

# Stage 2 - Final runtime image
FROM python-alpine

# Set working directory to function root directory
WORKDIR ${FUNCTION_DIR}

# Copy the built dependencies from the build image
COPY --from=build-image ${FUNCTION_DIR} ${FUNCTION_DIR}

# Download the Lambda Runtime Interface Emulator
ADD https://github.com/aws/aws-lambda-runtime-interface-emulator/releases/latest/download/aws-lambda-rie /usr/bin/aws-lambda-rie
RUN chmod 755 /usr/bin/aws-lambda-rie

# Install additional required packages (ffmpeg)
RUN apk --no-cache add ffmpeg

# Copy in the requirements.txt and install dependencies
COPY requirements.txt ${FUNCTION_DIR}
RUN python${RUNTIME_VERSION} -m pip install -r requirements.txt --target ${FUNCTION_DIR}

# Copy the handler function and entrypoint script
COPY entry.sh /
COPY handler.py ${FUNCTION_DIR}
RUN chmod 777 /entry.sh

# Set the entrypoint and default command
ENTRYPOINT ["/entry.sh"]
CMD ["handler.handler"]
