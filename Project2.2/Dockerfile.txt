# Copyright and License
#__copyright__   = "Copyright 2024, VISA Lab"
#__license__     = "MIT"

# Define global args
ARG RUNTIME_VERSION="3.8"  # Specify the Python version here (e.g., 3.8 or 3.9)
ARG FUNCTION_DIR="/home/aayu2/project2.2"  # Set the working directory for function code

# Base image to install Python and dependencies
FROM python:${RUNTIME_VERSION}-slim AS python-base

# Install necessary system dependencies for OpenCV, Torch, and other libraries
RUN apt-get update \
    && apt-get install -y --no-install-recommends \
    ffmpeg \
    libgl1-mesa-glx \
    libglib2.0-0 \
    libsm6 \
    libxrender1 \
    libxext6 \
    && rm -rf /var/lib/apt/lists/*  # Clean up apt cache to reduce image size

# Set up working directory for the function code
ARG FUNCTION_DIR="/home/aayu2/project2.2"
WORKDIR ${FUNCTION_DIR}

# Install Lambda Runtime Interface Client for Python (awslambdaric)
RUN python${RUNTIME_VERSION} -m pip install --no-cache-dir awslambdaric

# Copy the requirements file into the container and install dependencies
ARG FUNCTION_DIR="/home/aayu2/project2.2"
COPY requirements.txt ${FUNCTION_DIR}

# Install Python dependencies, including OpenCV, Torch, and other necessary libraries
RUN python${RUNTIME_VERSION} -m pip install --no-cache-dir \
    opencv-python-headless==4.5.5.64 \
    torchvision==0.10.0+cpu \
    facenet-pytorch \
    numpy \
    boto3 \
    # Install PyTorch CPU version from official PyTorch repository
    torch==1.9.0+cpu -f https://download.pytorch.org/whl/torch_stable.html

# Copy function code (handler.py, lambda_function.py, etc.)
ARG FUNCTION_DIR="/home/aayu2/project2.2"
COPY lambda_function.py ${FUNCTION_DIR}

# Optional: If you want to use Lambda Runtime Interface Emulator for local testing, uncomment the following lines
# ADD https://github.com/aws/aws-lambda-runtime-interface-emulator/releases/latest/download/aws-lambda-rie /usr/bin/aws-lambda-rie
# RUN chmod 755 /usr/bin/aws-lambda-rie

# Copy entry point shell script for Lambda
COPY entry.sh /entry.sh
RUN chmod +x /entry.sh

# Set the working directory for the Lambda function
ARG FUNCTION_DIR="/home/aayu2/project2.2"
WORKDIR ${FUNCTION_DIR}

# Set the CMD to your handler (could also be done as a parameter override outside of the Dockerfile)
ENTRYPOINT [ "/entry.sh" ]
CMD [ "lambda_function.lambda_handler" ]
